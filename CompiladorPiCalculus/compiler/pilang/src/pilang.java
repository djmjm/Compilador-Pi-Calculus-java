/* Generated By:JavaCC: Do not edit this line. pilang.java */
import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;


public class pilang implements pilangConstants {

        private static Integer num_threads;
        private static Integer threads_exe;
        private static Integer num_process;
        private static Integer num_braces;
        private static String code;
        private static LinkedList<String> tabela_simbolos;
        private static LinkedList<String> tabela_numericos;
        private static LinkedList<Integer> tabela_numeros;
        public static void main(String[] args) throws ParseException, TokenMgrError, IOException{

                tabela_simbolos = new LinkedList();
                tabela_numericos = new LinkedList();
                tabela_numeros = new LinkedList();
                num_process = new Integer(0);
                threads_exe = new Integer(0);
                num_threads = new Integer(0);
                num_braces = new Integer(0);

                code = "";
                code +=  "package pilang." + args[0] + ";\u005cn import pilang.src.*; \u005cn import java.util.concurrent.ConcurrentLinkedQueue; \u005cn import java.util.HashMap; \u005cn import java.util.Map;";

                code += "\u005cn public class " + args[0] + "{ ";



                pilang parser = new pilang(System.in);
                parser.start();


                File file =  new File("java/" + args[0] + ".java");
                BufferedWriter escritor = new BufferedWriter(new FileWriter(file));

                code += " \u005cn } ";


                escritor.write(code);
                escritor.close();

                System.out.println(tabela_simbolos);
                System.out.println(tabela_numericos);

        }

//Gramática

// Regra de início
  static final public void start() throws ParseException {
    define();
                code += "\u005cn \u005ct public static void main(String[] args){";
                for(int i = 0; i < tabela_simbolos.size(); i++){
                        code += "\u005cn \u005ct \u005ct \u005ct " + tabela_simbolos.get(i) + " = new Agente(\u005c"" + tabela_simbolos.get(i) + "\u005c") ;" ;
                }
                for(int i = 0; i < tabela_numericos.size(); i++){
                        code += "\u005cn \u005ct \u005ct \u005ct " + tabela_numericos.get(i) + " = new Numerico(\u005c"" + tabela_numericos.get(i) + "\u005c"," + tabela_numeros.get(i) +  ") ;" ;
                }
    jj_consume_token(BEGIN_MAIN);
    block();
    jj_consume_token(END_MAIN);
                code += "\u005cn \u005ct \u005ct }";
  }

  static final public void define() throws ParseException {
        Token ident;
        Token numero;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARE:
    case NUMERICO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
        jj_consume_token(DECLARE);
                code += " \u005cn \u005ct private static Agente ";
        ident = jj_consume_token(IDENT_L);
                                                                              code += ident.image + " ;";
                tabela_simbolos.add(ident.image);
        jj_consume_token(SEMI);
        break;
      case NUMERICO:
        jj_consume_token(NUMERICO);
                code += " \u005cn \u005ct private static Numerico ";
        ident = jj_consume_token(IDENT_L);
                                                                                code += ident.image + " ;";
                tabela_numericos.add(ident.image);
        numero = jj_consume_token(NUMBER);
                tabela_numeros.add(Integer.parseInt(numero.image));
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      define();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case PRINT:
    case LOCAL:
    case RETURN:
    case IDENT_L:
      statement();
      jj_consume_token(SEMI);
                code += "\u005cn \u005ct \u005ct // Execu\u00c3\u00a7\u00c3\u00a3o processos ....";
                for(int i = threads_exe; i< num_threads; i++){
                        code += " \u005cn \u005ct  \u005ct t" + i + ".start();";
                };

                code += "\u005cn \u005ct \u005ct try{";
                for(int i = threads_exe; i< num_threads; i++){
                        code += " \u005cn \u005ct  \u005ct t" + i + ".join();";
                };
                code += "\u005cn \u005ct \u005ct } catch(InterruptedException e){";
                code += "\u005cn \u005ct \u005ct System.out.println(e);";
                code += "\u005cn \u005ct \u005ct };";
                threads_exe = num_threads;
      block();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void statement() throws ParseException {
                code += " \u005cn \u005ct \u005ct \u005ct \u005ct // Processo " + num_threads;
                code += " \u005cn \u005ct \u005ct \u005ct Processo t" + num_threads + " = new Processo() { " ;
                code += " \u005cn \u005ct \u005ct \u005ct \u005ct public void run() { ";
                code += "\u005cn";
                code += " \u005cn \u005ct \u005ct \u005ct \u005ct // come\u00c3\u00a7o execu\u00c3\u00a7\u00c3\u00a3o ;;;";
    process();
                while(num_braces > 0){
                        code += " \u005cn \u005ct \u005ct \u005ct \u005ct \u005ct };";
                        num_braces--;
                }
                code += " \u005cn \u005ct \u005ct \u005ct \u005ct } \u005cn \u005ct \u005ct \u005ct } ;";
                num_threads++;
    statement_2();
  }

  static final public void statement_2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAR:
    case REPL:
                code += " \u005cn \u005ct \u005ct \u005ct \u005ct // Processo " + num_threads;
                code += " \u005cn \u005ct \u005ct \u005ct Processo t" + num_threads + " = new Processo() { " ;
                code += " \u005cn \u005ct \u005ct \u005ct \u005ct public void run() { " ;
                code += "\u005cn";
                code += " \u005cn \u005ct \u005ct \u005ct \u005ct // come\u00c3\u00a7o execu\u00c3\u00a7\u00c3\u00a3o ;;;";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR:
        par();
                while(num_braces > 0){
                        code += " \u005cn \u005ct \u005ct \u005ct \u005ct \u005ct };";
                        num_braces--;
                }
                code += " \u005cn \u005ct \u005ct \u005ct \u005ct } \u005cn \u005ct \u005ct \u005ct } ;";
                num_threads++;
        break;
      case REPL:
        code += "\u005cn \u005ct \u005ct \u005ct \u005ct boolean retorno = true;\u005cn \u005ct \u005ct \u005ct \u005ct while (retorno){ ";
        rep();
                while(num_braces > 0){
                        code += " \u005cn \u005ct \u005ct \u005ct \u005ct \u005ct };";
                        num_braces--;
                }
                code += " \u005cn \u005ct \u005ct \u005ct \u005ct } \u005cn \u005ct \u005ct \u005ct \u005ct } \u005cn \u005ct \u005ct \u005ct } ;";
                num_threads++;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      statement_2();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void par() throws ParseException {
    jj_consume_token(PAR);
    process();
  }

  static final public void rep() throws ParseException {
    jj_consume_token(REPL);
    process();
  }

  static final public void process() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT_L:
      prefix();
      break;
    case PRINT:
      print();
      break;
    case LOCAL:
      ex();
      break;
    case IF:
      if_rul();
      break;
    case RETURN:
      return1();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    process_2();
  }

  static final public void process_2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case PRINT:
    case LOCAL:
    case RETURN:
    case IDENT_L:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT_L:
        prefix();
        break;
      case PRINT:
        print();
        break;
      case LOCAL:
        ex();
        break;
      case IF:
        if_rul();
        break;
      case RETURN:
        return1();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      process_2();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void return1() throws ParseException {
 Token ident;
    jj_consume_token(RETURN);
                code += "\u005cn \u005ct \u005ct \u005ct \u005ct \u005ct retorno = false;" ;
    jj_consume_token(DOT);
  }

  static final public void if_rul() throws ParseException {
        Token ident1;
        Token ident2;
    jj_consume_token(IF);
    jj_consume_token(L_BRACE);
    ident1 = jj_consume_token(IDENT_L);
    jj_consume_token(EQUAL);
    jj_consume_token(EQUAL);
    ident2 = jj_consume_token(IDENT_L);
                num_braces++;
                code += "\u005cn \u005ct \u005ct \u005ct \u005ct \u005ct if(" + ident1.image + ".equal(tabela," + ident2.image + ")){";
    jj_consume_token(R_BRACE);
    jj_consume_token(DOT);
  }

  static final public void print() throws ParseException {
 Token ident;
    jj_consume_token(PRINT);
    jj_consume_token(L_BRA);
    ident = jj_consume_token(IDENT_L);
                code += "\u005cn \u005ct \u005ct \u005ct \u005ct \u005ct " + ident.image + ".print(tabela);";
    jj_consume_token(R_BRA);
    jj_consume_token(DOT);
  }

  static final public void ex() throws ParseException {
 Token ident;
    jj_consume_token(LOCAL);
    ident = jj_consume_token(IDENT_L);
                code += "\u005cn \u005ct \u005ct \u005ct \u005ct \u005ct Agente " + ident.image + " = new Agente(\u005c"" + ident.image + "\u005c");";
                code += "\u005cn \u005ct \u005ct \u005ct \u005ct \u005ct setParam(\u005c"" + ident.image + "\u005c"," + ident.image +");";
    jj_consume_token(DOT);
  }

  static final public void prefix() throws ParseException {
 Token ident;
    ident = jj_consume_token(IDENT_L);
                code += "\u005cn \u005ct \u005ct \u005ct \u005ct \u005ct " + ident.image;
    prefix_2();
  }

  static final public void prefix_2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_BRACE:
      in();
      break;
    case L_ANG:
      out();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void out() throws ParseException {
 Token ident;
    jj_consume_token(L_ANG);
    ident = jj_consume_token(IDENT_L);
                code += ".send(tabela," + ident.image + ");";
    jj_consume_token(R_ANG);
    jj_consume_token(DOT);
  }

  static final public void in() throws ParseException {
 Token ident;
    jj_consume_token(L_BRACE);
    ident = jj_consume_token(IDENT_L);
                code += ".receive(tabela," + ident.image + ");";
    jj_consume_token(R_BRACE);
    jj_consume_token(DOT);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public pilangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000000,0x6000000,0x4c9000,0x8002000,0x8002000,0x4c9000,0x4c9000,0x4c9000,0x200400,};
   }

  /** Constructor with InputStream. */
  public pilang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public pilang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new pilangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public pilang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new pilangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public pilang(pilangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(pilangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
